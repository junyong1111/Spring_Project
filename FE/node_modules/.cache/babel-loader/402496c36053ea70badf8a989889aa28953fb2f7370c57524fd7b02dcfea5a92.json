{"ast":null,"code":"var _jsxFileName = \"/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/components/security/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n\n  // async function login(username, password) {\n\n  //     try {\n\n  //         const response = await executeJwtAuthenticationService(username, password)\n\n  //         if(response.status==200){\n\n  //             const jwtToken = 'Bearer ' + response.data.token\n\n  //             setAuthenticated(true)\n  //             setUsername(username)\n  //             setToken(jwtToken)\n\n  //             apiClient.interceptors.request.use(\n  //                 (config) => {\n  //                     console.log('intercepting and adding a token')\n  //                     config.headers.Authorization = jwtToken\n  //                     return config\n  //                 }\n  //             )\n\n  //             return true            \n  //         } else {\n  //             logout()\n  //             return false\n  //         }    \n  //     } catch(error) {\n  //         logout()\n  //         return false\n  //     }\n  // }\n\n  function logout() {\n    setAuthenticated(false);\n    setToken(null);\n    setUsername(null);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"TN8WqXx3uVoSLaFezWMtgn1oPEU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","apiClient","executeJwtAuthenticationService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","logout","Provider","value","login","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/components/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n\n//1: Create a Context\nexport const AuthContext = createContext()\n\nexport const useAuth = () => useContext(AuthContext)\n\n//2: Share the created context with other components\nexport default function AuthProvider({ children }) {\n\n    //3: Put some state in the context\n    const [isAuthenticated, setAuthenticated] = useState(false)\n    const [username, setUsername] = useState(null)\n    const [token, setToken] = useState(null)\n\n   \n\n    // async function login(username, password) {\n\n    //     try {\n\n    //         const response = await executeJwtAuthenticationService(username, password)\n\n    //         if(response.status==200){\n                \n    //             const jwtToken = 'Bearer ' + response.data.token\n                \n    //             setAuthenticated(true)\n    //             setUsername(username)\n    //             setToken(jwtToken)\n\n    //             apiClient.interceptors.request.use(\n    //                 (config) => {\n    //                     console.log('intercepting and adding a token')\n    //                     config.headers.Authorization = jwtToken\n    //                     return config\n    //                 }\n    //             )\n\n    //             return true            \n    //         } else {\n    //             logout()\n    //             return false\n    //         }    \n    //     } catch(error) {\n    //         logout()\n    //         return false\n    //     }\n    // }\n\n\n    function logout() {\n        setAuthenticated(false)\n        setToken(null)\n        setUsername(null)\n    }\n\n    return (\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username, token}  }>\n            {children}\n        </AuthContext.Provider>\n    )\n} "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,+BAA+B,QAAQ,iCAAiC;;AAEjF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAE/C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAIxC;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,SAASiB,MAAMA,CAAA,EAAG;IACdL,gBAAgB,CAAC,KAAK,CAAC;IACvBI,QAAQ,CAAC,IAAI,CAAC;IACdF,WAAW,CAAC,IAAI,CAAC;EACrB;EAEA,oBACIV,OAAA,CAACC,WAAW,CAACa,QAAQ;IAACC,KAAK,EAAG;MAACR,eAAe;MAAES,KAAK;MAAEH,MAAM;MAAEJ,QAAQ;MAAEE;IAAK,CAAI;IAAAN,QAAA,EAC7EA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACd,GAAA,CAtDuBF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}