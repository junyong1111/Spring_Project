{"ast":null,"code":"var _jsxFileName = \"/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/security/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { executeJwtAuthenticationsService } from \"../components/api/AuthApiService\";\nimport { apiClinet } from \"../components/api/ApiClient\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n  async function login(username, password) {\n    try {\n      const response = await executeJwtAuthenticationsService(username, password);\n      if (response.status === 200) {\n        const jwtToken = 'Bearer ' + response.data.token;\n        setAuthenticated(true);\n        setUsername(username);\n        setToken(jwtToken);\n        apiClinet.interceptors.request.use(config => {\n          console.log('intercepting and adding a token');\n          config.headers.Authorization = jwtToken;\n          return config;\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }\n  function logout() {\n    setAuthenticated(false);\n    setToken(null);\n    setUsername(null);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"TN8WqXx3uVoSLaFezWMtgn1oPEU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","executeJwtAuthenticationsService","apiClinet","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","login","password","response","status","jwtToken","data","interceptors","request","use","config","console","log","headers","Authorization","logout","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { executeJwtAuthenticationsService } from \"../components/api/AuthApiService\";\nimport { apiClinet } from \"../components/api/ApiClient\";\n\n//1: Create a Context\nexport const AuthContext = createContext()\n\nexport const useAuth = () => useContext(AuthContext)\n\n//2: Share the created context with other components\nexport default function AuthProvider({ children }) {\n\n    //3: Put some state in the context\n    const [isAuthenticated, setAuthenticated] = useState(false)\n    const [username, setUsername] = useState(null)\n    const [token, setToken] = useState(null)\n\n   async function login(username, password){\n    \n    try{\n        const response = await executeJwtAuthenticationsService(username, password)\n        if(response.status === 200){\n            const jwtToken = 'Bearer ' + response.data.token\n            setAuthenticated(true)\n            setUsername(username)\n            setToken(jwtToken);\n\n            apiClinet.interceptors.request.use(\n                (config) => {\n                    console.log('intercepting and adding a token')\n                    config.headers.Authorization=jwtToken\n                    return config\n                }\n            )\n            return true\n        }\n        else{\n            logout()\n            return false\n        }\n    }\n    catch(error){\n        logout()\n        return false\n    }\n    \n   }\n\n    function logout() {\n        setAuthenticated(false)\n        setToken(null)\n        setUsername(null)\n    }\n\n    return (\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username, token}  }>\n            {children}\n        </AuthContext.Provider>\n    )\n} "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,gCAAgC,QAAQ,kCAAkC;AACnF,SAASC,SAAS,QAAQ,6BAA6B;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAE/C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAEzC,eAAeiB,KAAKA,CAACJ,QAAQ,EAAEK,QAAQ,EAAC;IAEvC,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMlB,gCAAgC,CAACY,QAAQ,EAAEK,QAAQ,CAAC;MAC3E,IAAGC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;QACvB,MAAMC,QAAQ,GAAG,SAAS,GAAGF,QAAQ,CAACG,IAAI,CAACP,KAAK;QAChDH,gBAAgB,CAAC,IAAI,CAAC;QACtBE,WAAW,CAACD,QAAQ,CAAC;QACrBG,QAAQ,CAACK,QAAQ,CAAC;QAElBnB,SAAS,CAACqB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;UACRC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9CF,MAAM,CAACG,OAAO,CAACC,aAAa,GAACT,QAAQ;UACrC,OAAOK,MAAM;QACjB,CACJ,CAAC;QACD,OAAO,IAAI;MACf,CAAC,MACG;QACAK,MAAM,CAAC,CAAC;QACR,OAAO,KAAK;MAChB;IACJ,CAAC,CACD,OAAMC,KAAK,EAAC;MACRD,MAAM,CAAC,CAAC;MACR,OAAO,KAAK;IAChB;EAED;EAEC,SAASA,MAAMA,CAAA,EAAG;IACdnB,gBAAgB,CAAC,KAAK,CAAC;IACvBI,QAAQ,CAAC,IAAI,CAAC;IACdF,WAAW,CAAC,IAAI,CAAC;EACrB;EAEA,oBACIV,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACC,KAAK,EAAG;MAACvB,eAAe;MAAEM,KAAK;MAAEc,MAAM;MAAElB,QAAQ;MAAEE;IAAK,CAAI;IAAAN,QAAA,EAC7EA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAAC5B,GAAA,CAjDuBF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}