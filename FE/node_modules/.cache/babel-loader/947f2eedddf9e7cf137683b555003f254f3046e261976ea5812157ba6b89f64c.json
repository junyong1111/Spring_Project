{"ast":null,"code":"// import { useEffect, useState } from 'react'\n// import {useParams, useNavigate} from 'react-router-dom'\n// import { retrieveTodoApi, updateTodoApi, createTodoApi } from './api/TodoApiService'\n// import { useAuth } from './security/AuthContext'\n// import {Formik, Form, Field, ErrorMessage} from 'formik'\n// import moment from 'moment'\n\n// export default function TodoComponent() {\n\n//     const {id} = useParams()\n\n//     const[description, setDescription] = useState('')\n//     const[targetDate, setTargetDate] = useState('')\n\n//     const authContext = useAuth()\n//     const navigate = useNavigate()\n\n//     const username = authContext.username\n\n//     useEffect(\n//         () => retrieveTodos(),\n//         [id]\n//         )\n\n//     function retrieveTodos(){\n//         if(id != -1) {\n//             retrieveTodoApi(username, id)\n//             .then(response => {\n//                 setDescription(response.data.description)\n//                 setTargetDate(response.data.targetDate)\n//             })\n//             .catch(error => console.log(error))\n//         }\n//     }\n\n//     function onSubmit(values) {\n//         console.log(values)\n\n//         const todo = {\n//             id: id,\n//             username: username,\n//             description: values.description,\n//             targetDate: values.targetDate,\n//             done: false\n//         }\n\n//         console.log(todo)\n\n//         if(id==-1) {\n//             createTodoApi(username, todo)\n//             .then(response => {\n//                 navigate('/todos')\n//             })\n//             .catch(error => console.log(error))\n\n//         } else {\n//             updateTodoApi(username, id, todo)\n//             .then(response => {\n//                 navigate('/todos')\n//             })\n//             .catch(error => console.log(error))\n//         }\n//     }\n\n//     function validate(values) {\n//         let errors = {\n//             // description: 'Enter a valid description',\n//             // targetDate: 'Enter a valid target date'\n//         }\n\n//         if(values.description.length<5) {\n//             errors.description = 'Enter atleast 5 characters'\n//         }\n\n//         if(values.targetDate == null || values.targetDate=='' || !moment(values.targetDate).isValid()) {\n//             errors.targetDate = 'Enter a target date'\n//         }\n\n//         console.log(values)\n//         return errors\n//     }\n\n//     return (\n//         <div className=\"container\">\n//             <h1>Enter Todo Details </h1>\n//             <div>\n//                 <Formik initialValues={ { description, targetDate } } \n//                     enableReinitialize = {true}\n//                     onSubmit = {onSubmit}\n//                     validate = {validate}\n//                     validateOnChange = {false}\n//                     validateOnBlur = {false}\n//                 >\n//                 {\n//                     (props) => (\n//                         <Form>\n//                             <ErrorMessage \n//                                 name=\"description\"\n//                                 component=\"div\"\n//                                 className = \"alert alert-warning\"\n//                             />\n\n//                             <ErrorMessage \n//                                 name=\"targetDate\"\n//                                 component=\"div\"\n//                                 className = \"alert alert-warning\"\n//                             />\n\n//                             <fieldset className=\"form-group\">\n//                                 <label>Description</label>\n//                                 <Field type=\"text\" className=\"form-control\" name=\"description\" />\n//                             </fieldset>\n//                             <fieldset className=\"form-group\">\n//                                 <label>Target Date</label>\n//                                 <Field type=\"date\" className=\"form-control\" name=\"targetDate\"/>\n//                             </fieldset>\n//                             <div>\n//                                 <button className=\"btn btn-success m-5\" type=\"submit\">Save</button>\n//                             </div>\n//                         </Form>\n//                     )\n//                 }\n//                 </Formik>\n//             </div>\n\n//         </div>\n//     )\n// }","map":{"version":3,"names":[],"sources":["/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/components/TodoComponent.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react'\n// import {useParams, useNavigate} from 'react-router-dom'\n// import { retrieveTodoApi, updateTodoApi, createTodoApi } from './api/TodoApiService'\n// import { useAuth } from './security/AuthContext'\n// import {Formik, Form, Field, ErrorMessage} from 'formik'\n// import moment from 'moment'\n\n// export default function TodoComponent() {\n    \n//     const {id} = useParams()\n    \n//     const[description, setDescription] = useState('')\n//     const[targetDate, setTargetDate] = useState('')\n\n//     const authContext = useAuth()\n//     const navigate = useNavigate()\n    \n//     const username = authContext.username\n    \n//     useEffect(\n//         () => retrieveTodos(),\n//         [id]\n//         )\n\n//     function retrieveTodos(){\n//         if(id != -1) {\n//             retrieveTodoApi(username, id)\n//             .then(response => {\n//                 setDescription(response.data.description)\n//                 setTargetDate(response.data.targetDate)\n//             })\n//             .catch(error => console.log(error))\n//         }\n//     }\n\n//     function onSubmit(values) {\n//         console.log(values)\n        \n//         const todo = {\n//             id: id,\n//             username: username,\n//             description: values.description,\n//             targetDate: values.targetDate,\n//             done: false\n//         }\n\n//         console.log(todo)\n\n//         if(id==-1) {\n//             createTodoApi(username, todo)\n//             .then(response => {\n//                 navigate('/todos')\n//             })\n//             .catch(error => console.log(error))\n    \n//         } else {\n//             updateTodoApi(username, id, todo)\n//             .then(response => {\n//                 navigate('/todos')\n//             })\n//             .catch(error => console.log(error))\n//         }\n//     }\n\n//     function validate(values) {\n//         let errors = {\n//             // description: 'Enter a valid description',\n//             // targetDate: 'Enter a valid target date'\n//         }\n\n//         if(values.description.length<5) {\n//             errors.description = 'Enter atleast 5 characters'\n//         }\n\n//         if(values.targetDate == null || values.targetDate=='' || !moment(values.targetDate).isValid()) {\n//             errors.targetDate = 'Enter a target date'\n//         }\n\n//         console.log(values)\n//         return errors\n//     }\n\n//     return (\n//         <div className=\"container\">\n//             <h1>Enter Todo Details </h1>\n//             <div>\n//                 <Formik initialValues={ { description, targetDate } } \n//                     enableReinitialize = {true}\n//                     onSubmit = {onSubmit}\n//                     validate = {validate}\n//                     validateOnChange = {false}\n//                     validateOnBlur = {false}\n//                 >\n//                 {\n//                     (props) => (\n//                         <Form>\n//                             <ErrorMessage \n//                                 name=\"description\"\n//                                 component=\"div\"\n//                                 className = \"alert alert-warning\"\n//                             />\n                            \n//                             <ErrorMessage \n//                                 name=\"targetDate\"\n//                                 component=\"div\"\n//                                 className = \"alert alert-warning\"\n//                             />\n\n//                             <fieldset className=\"form-group\">\n//                                 <label>Description</label>\n//                                 <Field type=\"text\" className=\"form-control\" name=\"description\" />\n//                             </fieldset>\n//                             <fieldset className=\"form-group\">\n//                                 <label>Target Date</label>\n//                                 <Field type=\"date\" className=\"form-control\" name=\"targetDate\"/>\n//                             </fieldset>\n//                             <div>\n//                                 <button className=\"btn btn-success m-5\" type=\"submit\">Save</button>\n//                             </div>\n//                         </Form>\n//                     )\n//                 }\n//                 </Formik>\n//             </div>\n\n//         </div>\n//     )\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}