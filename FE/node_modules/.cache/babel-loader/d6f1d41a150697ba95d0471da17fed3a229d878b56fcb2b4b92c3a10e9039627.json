{"ast":null,"code":"var _jsxFileName = \"/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/security/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { executeBasicAuthenticationsService } from \"../components/api/HelloWorldApiService\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n\n  //    function login(username, password){\n  //     if(username === \"PARK\" && password ===\"dummy\"){\n  //         setAuthenticated(true)\n  //         setUsername(username)\n  //         return true\n  //     }\n  //     else{\n  //         setAuthenticated(false)\n  //         setUsername(null)\n  //         return false\n  //     }\n  //    }\n\n  function login(username, password) {\n    const baToken = 'Basic ' + window.btoa(username + \":\" + password); // base64 인코딩\n    executeBasicAuthenticationsService(baToken).then(response => console.log(response)).catch(error => console.log(error));\n    setAuthenticated(false);\n\n    // if(username === \"PARK\" && password ===\"dummy\"){\n    //     setAuthenticated(true)\n    //     setUsername(username)\n    //     return true\n    // }\n    // else{\n    //     setAuthenticated(false)\n    //     setUsername(null)\n    //     return false\n    // }\n  }\n  function logout() {\n    setAuthenticated(false);\n    setToken(null);\n    setUsername(null);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"TN8WqXx3uVoSLaFezWMtgn1oPEU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","executeBasicAuthenticationsService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","login","password","baToken","window","btoa","then","response","console","log","catch","error","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dak_kiwon/Jun/Springboot/ch6/frontend/todo-app/src/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { executeBasicAuthenticationsService } from \"../components/api/HelloWorldApiService\";\n\n//1: Create a Context\nexport const AuthContext = createContext()\n\nexport const useAuth = () => useContext(AuthContext)\n\n//2: Share the created context with other components\nexport default function AuthProvider({ children }) {\n\n    //3: Put some state in the context\n    const [isAuthenticated, setAuthenticated] = useState(false)\n    const [username, setUsername] = useState(null)\n    const [token, setToken] = useState(null)\n\n//    function login(username, password){\n//     if(username === \"PARK\" && password ===\"dummy\"){\n//         setAuthenticated(true)\n//         setUsername(username)\n//         return true\n//     }\n//     else{\n//         setAuthenticated(false)\n//         setUsername(null)\n//         return false\n//     }\n//    }\n\n   function login(username, password){\n    const baToken = 'Basic ' + window.btoa(username + \":\" + password) // base64 인코딩\n    executeBasicAuthenticationsService(baToken)\n    .then( (response) => console.log(response))\n    .catch((error) => console.log(error))\n\n    setAuthenticated(false)\n\n    // if(username === \"PARK\" && password ===\"dummy\"){\n    //     setAuthenticated(true)\n    //     setUsername(username)\n    //     return true\n    // }\n    // else{\n    //     setAuthenticated(false)\n    //     setUsername(null)\n    //     return false\n    // }\n   }\n\n    \n\n\n    function logout() {\n        setAuthenticated(false)\n        setToken(null)\n        setUsername(null)\n    }\n\n    return (\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username, token}  }>\n            {children}\n        </AuthContext.Provider>\n    )\n} "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,kCAAkC,QAAQ,wCAAwC;;AAE3F;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAE/C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEG,SAASgB,KAAKA,CAACJ,QAAQ,EAAEK,QAAQ,EAAC;IACjC,MAAMC,OAAO,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACR,QAAQ,GAAG,GAAG,GAAGK,QAAQ,CAAC,EAAC;IAClEhB,kCAAkC,CAACiB,OAAO,CAAC,CAC1CG,IAAI,CAAGC,QAAQ,IAAKC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC,CAC1CG,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;IAErCf,gBAAgB,CAAC,KAAK,CAAC;;IAEvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;EAKC,SAASgB,MAAMA,CAAA,EAAG;IACdhB,gBAAgB,CAAC,KAAK,CAAC;IACvBI,QAAQ,CAAC,IAAI,CAAC;IACdF,WAAW,CAAC,IAAI,CAAC;EACrB;EAEA,oBACIV,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACC,KAAK,EAAG;MAACnB,eAAe;MAAEM,KAAK;MAAEW,MAAM;MAAEf,QAAQ;MAAEE;IAAK,CAAI;IAAAN,QAAA,EAC7EA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACxB,GAAA,CAtDuBF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}